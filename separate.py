'''
we first retrive the metadata of each malware sample by using virus total API, and then parse the json file and 
move the malware sample to their corresponding folders (Intel, ARM, x86-64) based on what we parse from the json files.

make sure to adjust the paths in this file to successfully access your malware files and transfer them into different folders.
'''


import sys
import os
from os import path
from os import listdir
from os.path import isfile, join

import json, urllib, argparse, hashlib, re, sys
import urllib.parse
import urllib.request
from pprint import pprint
import flask
import shutil

mypath = "/home/alex/" #change to your username
resultpath = "/home/alex/Desktop/Metadata/" # create a folder called metadata to store metadata of each malware file
source = 'VirusTotal_'

class vtAPI(): #get metadata in the format of json
    def __init__(self):
        self.api = 'YOUR API KEY'
        self.base = 'https://www.virustotal.com/vtapi/v2/' #we use virus total to get the metadata for each malware
    
    def getReport(self,filehash):
        param = {'resource':filehash,'apikey':self.api, 'allinfo':'1'}
        url = self.base + "file/report"
        data = urllib.parse.urlencode(param).encode("utf-8")
        result = urllib.request.urlopen(url,data)
        jdata =  json.loads(result.read())
        return jdata
    
    def rescan(self,filehash):
        param = {'resource':filehash,'apikey':self.api}
        url = self.base + "file/rescan"
        data = urllib.parse.urlencode(param).encode("utf-8")
        result = urllib.request.urlopen(url,data)
        print("\n\tVirus Total Rescan Initiated for -- " + filehash + " (Requery in 10 Mins)")
        
def parse(it, filehash, verbose, jsondump): #parse the json file
  result = ''

  if it['response_code'] == 0:
    result += filehash + " -- Not Found in VT"
    sys.exit(0)
    return 0

 
  result += "\n\tResults for Hash: %s\n\n\tDetected by: %s/%s\n" % (it['md5'], it['positives'], it['total'])
  
  if 'Sophos' in it['scans']:
   
    result += '\tSophos Detection: %s\n' % (it['scans']['Sophos']['result'])
  
  if 'Kaspersky' in it['scans']:
   
    result += '\tKaspersky Detection: %s\n' % (it['scans']['Kaspersky']['result'])
  
  if 'ESET-NOD32' in it['scans']:
   
    result += '\tESET Detection: %s\n' % (it['scans']['ESET-NOD32']['result'])

  if 'magic' in it['additional_info']:
   
    result += '\n\tMagic info: %s\n' %(it['additional_info']['magic'])

  if 'first_seen_itw' in it['additional_info']:
    
    result += '\tFirst seen in-the-wild: %s\n' %(it['additional_info']['first_seen_itw'])
      
  
  result += '\tFirst seen by VirusTotal: %s\n' %(it['first_seen'])
  
  result += '\tScanned by VirusTotal on: %s' %(it['scan_date'])
  
  if jsondump == True:
    
    
    with open(resultpath + source + filehash + ".json", "w", encoding="utf-8") as f:
        f.write(str(it))
        
   
    result += "\n\tJSON Written to File -- %s.json\n\n" % (source + filehash)

  if verbose == True:
   
    result += '\n\tVerbose VirusTotal Information Output:\n\n'
    for x in it['scans']:
     
     result += '\t%-*s\t\t%-*s\t\t%s\n' %(20, x, 20, it['scans'][x]['detected'], it['scans'][x]['result'])



  f = open(resultpath + source + filehash + ".txt", "a")
  f.write(result)
  f.close()
  # moving malware files to their corresponding folders
  if 'magic' in it['additional_info']: #in the json file, magic represents the architecture type


    if len(it['additional_info']['magic'].split(", "))!=1:


      if (it['additional_info']['magic'].split(", ")[1])=='ARM': #if the architecture type is ARM
        shutil.move('/home/alex/Desktop/20200405/VirusShare_' + filehash, '/home/alex/Desktop/ARM Viruses')
        print('\n\tMagic info:',it['additional_info']['magic'].split(", ")[1])

      elif (it['additional_info']['magic'].split(", ")[1])=='Intel 80386': #if the architecture type is Intel 80386
        shutil.move('/home/alex/Desktop/20200405/VirusShare_' + filehash, '/home/alex/Desktop/Intel')
        print('\n\tMagic info:',it['additional_info']['magic'].split(", ")[1])
      
      elif (it['additional_info']['magic'].split(", ")[1])=='x86-64': #if the architecture type is x86-64
        shutil.move('/home/alex/Desktop/20200405/VirusShare_' + filehash, '/home/alex/Desktop/x86')
        print('\n\tMagic info:',it['additional_info']['magic'].split(", ")[1])

      else:
        shutil.move('/home/alex/Desktop/20200405/VirusShare_' + filehash, '/home/alex/Desktop/Other types') #if the architecture type is others
        print('\n\tMagic info:',it['additional_info']['magic'].split(", ")[1])
    else:
      print('\n\tOne element:',it['additional_info']['magic'].split(", "))


#--------------------------------------------------------------
#loop through each malware sample in the folder malware_samples

dirs = os.listdir('/home/alex/Desktop/malware_samples')
for file in dirs:
  vt=vtAPI()
  print(file[11:])
  parse(vt.getReport(file[11:]), file[11:] , True, True)



